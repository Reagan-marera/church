"""empty message

Revision ID: 1ab6db95e735
Revises: 
Create Date: 2025-03-28 20:54:18.501584

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy import inspect

# revision identifiers, used by Alembic.
revision = '1ab6db95e735'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # Check if 'user_id' column already exists
    bind = op.get_bind()
    inspector = inspect(bind)
    columns = [column['name'] for column in inspector.get_columns('estimate')]

    if 'user_id' not in columns:
        with op.batch_alter_table('estimate', schema=None) as batch_op:
            batch_op.add_column(sa.Column('user_id', sa.Integer(), nullable=True))

    # Ensure all rows have a valid user_id before altering to NOT NULL
    bind.execute("UPDATE estimate SET user_id = 1 WHERE user_id IS NULL")  # Replace '1' with a valid user_id if needed

    # Alter the column to make it non-nullable after ensuring data integrity
    with op.batch_alter_table('estimate', schema=None) as batch_op:
        batch_op.alter_column('user_id', nullable=False)
    
    # Add the foreign key constraint
    with op.batch_alter_table('estimate', schema=None) as batch_op:
        batch_op.create_foreign_key('fk_user_user_id', 'user', ['user_id'], ['id'])


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('estimate', schema=None) as batch_op:
        batch_op.drop_constraint('fk_user_user_id', type_='foreignkey')
        batch_op.drop_column('user_id')

    # ### end Alembic commands ###
